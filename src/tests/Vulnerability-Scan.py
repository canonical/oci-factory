#!/usr/bin/env python3

import argparse
import logging
import os
import sys

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
ROCKS_DIR = os.path.dirname(SCRIPT_DIR)
SRC_DIR = os.path.dirname(ROCKS_DIR)
sys.path.append(ROCKS_DIR)
sys.path.append(SRC_DIR)

import helper_functions
from tests.tester import Test, TestingError


class VulnerabilityScan(Test):
    def trivy_cve_scan(
        self, scan_type, additional_args, trivy_image
    ):
        try:
            scan_output = helper_functions.run_trivy_scan(
                self.image,
                scan_type,
                trivy_image,
                additional_args=additional_args,
                docker_client=self._docker_client,
            )
        except Exception as err:
            logging.error(
                f"The image {self.image} has HIGH or CRITICAL vulnerabilities"
            )
            raise TestingError(str(err))

        logging.info(f"Vulnerability scan result:\n{scan_output}")


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)

    parser = argparse.ArgumentParser(
        description="Runs vulnerability scans and security checks"
    )
    parser.add_argument(
        "--image",
        dest="docker_image",
        default=None,
        help="name of the local Docker image to be tested",
    )
    parser.add_argument(
        "--filesystem",
        dest="filesystem",
        default=None,
        help="path to the image's filesystem, if --docker-image is not provided",
    )
    parser.add_argument(
        "--additional-trivy-args",
        dest="trivy_args",
        default="",
        help="additional arguments to pass to the Trivy scan, eg. --additional-trivy-args='--quiet --offline-scan'",
    )
    parser.add_argument(
        "--trivy-image",
        dest="trivy_image",
        default="aquasec/trivy:0.30.4",
        help="default Trivy image where to run the scan",
    )

    args = parser.parse_args()

    if args.docker_image:
        scanner = VulnerabilityScan(
            image=args.docker_image, image_format="docker-daemon"
        )
        scan_type = "image"
    elif args.filesystem:
        scanner = VulnerabilityScan(image=args.filesystem, image_format="fs")
        scan_type = "filesystem"
    else:
        parser.error("Need at least one argument")

    logging.info(f"Running vulnerability scan for {scanner.image}...")
    scanner.trivy_cve_scan(scan_type, args.trivy_args, args.trivy_image)
