#!/usr/bin/env python3

import argparse
import os
import sys

from ..shared.logs import Logger
from .tester import Test, TestingError
from .utils import helpers as helper_functions


class MalwareScan(Test):
    @staticmethod
    def check_minimum_requirements() -> bool:
        """Returns false if the underlying host doesn't have
        the minimum requirements"""
        # Clamav needs at least 1.5GB of memory
        total_memory = os.popen("free -t -m").readlines()[-1].split()[1]
        return int(total_memory) / 1024 >= 1.5

    def clamav_scan(self, additional_args):
        for tries in range(0, 2):
            # Clamav needs quite some memory (1-2GB) so it can fail
            # sometimes, depending on how busy the host is.
            # This loop allows us to try a second time, whenever the error is
            # due to memory
            try:
                scan_output = helper_functions.run_malware_scan(
                    self.image,
                    additional_args=additional_args,
                    docker_client=self._docker_client,
                )
            except Exception as err:
                if err.args[-1] == 137:
                    logger.error("Malware scan failed due to lack of memory")
                    if tries == 0:
                        logger.warning("Running malware scan a 2nd time...")
                        continue
                else:
                    logger.error(f"Found infected files at {self.image}")
                raise TestingError(str(err))

            break

        logger.info(f"Clamav scan result:\n{scan_output}")


if __name__ == "__main__":
    logger = Logger(stream=sys.stdout, level="INFO").get_logger()

    parser = argparse.ArgumentParser(
        description="Runs a Malware scan on the provided rock's filesystem"
    )
    parser.add_argument(
        "--filesystem",
        dest="filesystem",
        required=True,
        help="path to the rock's filesystem",
    )
    parser.add_argument(
        "--skip-with-error",
        dest="skip_with_error",
        action="store_true",
        default=False,
        help="if the scan cannot be executed at all, fail with an error",
    )
    parser.add_argument(
        "--additional-clamav-args",
        dest="clamav_args",
        default="",
        help="additional arguments to pass to the Clamav scan, eg. --additional-clamav-args='--quiet --bell'",
    )

    args = parser.parse_args()

    scanner = MalwareScan(image=args.filesystem, image_format="fs")
    if not scanner.check_minimum_requirements():
        msg = "System does not have the minimum requirements to run this scan"
        if args.skip_with_error:
            raise Exception(msg)
        logger.error(msg)
        sys.exit(0)

    logger.info(f"Running Malware scan, recursively, on directory {scanner.image}")
    scanner.clamav_scan(args.clamav_args)
