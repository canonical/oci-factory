name: Tests
run-name: "Tests - ${{ inputs.oci-image-name }} - ${{ github.ref }}"

# on:
#   workflow_call:
#     inputs:
# oci-image-name:
#   description: "Name of the image to be fetched and tested"
#   required: true
#   type: string
# oci-image-path:
#   description: 'Path to the image in this repo (eg. "oci/foo")'
#   required: true
#   type: string
# test-from:
#   description: "From where to fetch the OCI image to be tested"
#   required: true
#   default: "cache"
#   type: string
# cache-key:
#   description: "Cache key (when fetching from cache)"
#   required: false
#   type: string
# vulnerability-report-suffix:
#   description: "Suffix for the vulnerability report artefact"
#   required: false
#   type: string
#   default: ".vulnerability-report.json"

on:
  workflow_call:
    inputs:
      # Workflow Configuration
      oci-archive-name:
        description: "OCI image artifact name."
        required: true
        type: string

      # Individual Test Configurations:

      ## ICU Compliance Test
      test-oci-compliance:
        description: "Enable compliance test."
        default: true
        type: boolean

      ## Image Efficiency Test
      test-efficiency:
        description: "Enable image efficiency test."
        default: true
        type: boolean

      ## Vulnerability Test
      test-vulnerabilities:
        description: "Enable vulnerability test."
        default: true
        type: boolean
      date-last-scan:
        description: "Report if there are new CVEs after this date."
        type: string
        default: "9999-12-31T23:59:59"

      ## Malware Test
      test_malware:
        description: "Enable malware test."
        default: true
        type: boolean

env:
  TEST_IMAGE_NAME: "test-img"
  TEST_IMAGE_TAG: "test"
  SKOPEO_IMAGE: "quay.io/skopeo/stable:v1.15.1"
  UMOCI_VERSION: "v0.4.7"
  UMOCI_BINARY: "umoci.amd64"
  DIVE_IMAGE: "wagoodman/dive:v0.12"
  TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,aquasec/trivy-db,ghcr.io/aquasecurity/trivy-db
  TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,aquasec/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db

jobs:
  # access-check:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Validate access to triggered image
  #       uses: ./.github/actions/validate-actor
  #       if: ${{ github.repository == 'canonical/oci-factory' && !github.event.pull_request.head.repo.fork }}
  #       with:
  #         admin-only: true
  #         image-path: ${{ inputs.oci-image-path }}
  #         github-token: ${{ secrets.ROCKSBOT_TOKEN }}

  unpack-rock:
    # unpack-rock downloads and unpacks the image under test and
    # stores it under a common cache key. This unpacked image is used
    # in test-oci-compliance and test_malware jobs
    runs-on: ubuntu-22.04
    name: Unpack Rock
    outputs:
      cache-key: ${{ steps.set-cache.outputs.key }}
    steps:
      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - name: Download Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Unpack Rock
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            oci:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}

      - name: Set Cache Key
        id: set-cache
        run: |
          echo "key=${{ github.run_id }}-${{ inputs.oci-archive-name }}"  >> $GITHUB_OUTPUT

      - name: Cache Rock
        uses: actions/cache/save@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ steps.set-cache.outputs.key }}

  test-oci-compliance:
    runs-on: ubuntu-22.04
    name: Test OCI compliance
    needs: [unpack-rock]
    steps:
      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.cache-key }}

      - name: Install Umoci
        run: |
          wget https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/${UMOCI_BINARY}
          sudo mv ${UMOCI_BINARY} /usr/bin/umoci
          sudo chmod +x /usr/bin/umoci

      - name: Run Umoci tests
        run: |
          sudo umoci unpack --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            bundle

          umoci list --layout ${{ env.TEST_IMAGE_NAME}} | grep -w -c ${{ env.TEST_IMAGE_TAG }}

  test-black-box:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    name: Black-box and portability tests
    needs: [unpack-rock]
    steps:
      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.cache-key }}

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - name: Test rock
        run: |
          set -ex
          docker run --rm ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            help | grep Pebble

      - name: Create container
        run: |
          docker create ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

  test-efficiency:
    runs-on: ubuntu-22.04
    name: Efficiency test
    needs: [unpack-rock]
    # TODO: remove once https://chat.charmhub.io/charmhub/pl/o5wxpb65ffbfzy7bcmi8kzftzy is fixed
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.cache-key }}

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      # The existing Dive GH actions are outdated:
      # https://github.com/MartinHeinz/dive-action/issues/1
      # https://github.com/yuichielectric/dive-action/issues/581
      - name: Dive efficiency test
        run: |
          docker run -e CI=true --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/src/tests/.dive-ci.yaml:/.dive-ci.yaml \
            ${{ env.DIVE_IMAGE }} \
            ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} --ci-config /.dive-ci.yaml

  # test-vulnerabilities:
  #   name: Vulnerability scan
  #   needs: [fetch-oci-image]
  #   uses: ./.github/workflows/Vulnerability-Scan.yaml
  #   with:
  #     oci-image-name: "${{ inputs.oci-image-name }}"
  #     oci-image-path: "${{ inputs.oci-image-path }}"
  #     cache-key: "${{ needs.fetch-oci-image.outputs.test-cache-key }}"
  #     vulnerability-report-suffix: "${{ inputs.vulnerability-report-suffix}}"
  #   secrets: inherit

  test-vulnerabilities:
    runs-on: ubuntu-22.04
    name: Vulnerability scan
    outputs:
      vulnerability-report: ${{ steps.vulnerability-report.outputs.name }}
      notify: ${{ steps.check-report.outputs.notify }}
      vulnerabilities: ${{ steps.check-report.outputs.vulnerabilities }}
    steps:
      - uses: actions/checkout@v4

      # - name: Validate access to triggered image
      #   uses: ./.github/actions/validate-actor
      #   if: ${{ github.repository == 'canonical/oci-factory' && !github.event.pull_request.head.repo.fork }}
      #   with:
      #     admin-only: true
      #     image-path: ${{ inputs.oci-image-path }}
      #     github-token: ${{ secrets.ROCKSBOT_TOKEN }}

      - id: vulnerability-report
        run: |
          full_name="${{ inputs.oci-image-name }}${{ inputs.vulnerability-report-suffix }}"
          final_name="$(echo ${full_name} | sed 's/ghcr.io\/canonical\/oci-factory\///g' | tr ':' '_')"
          echo "name=$final_name" >> "$GITHUB_OUTPUT"

      - uses: actions/cache/restore@v4
        if: ${{ inputs.cache-key != '' }}
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true

      - name: Copy image to Docker daemon
        id: to-docker-daemon
        run: |
          d_img_name="${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}"
          echo "name=$d_img_name" >> "$GITHUB_OUTPUT"
          if [[ "${{ inputs.cache-key}}" != "" ]]
          then
            source=oci:${{ env.TEST_IMAGE_NAME}} 
          else
            source=docker://${{ inputs.oci-image-name }}
          fi
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy $source \
            docker-daemon:$d_img_name

      - name: Check for .trivyignore
        id: trivyignore
        run: |
          if [ -f ${{ inputs.oci-image-path }}/.trivyignore ]
          then
            file=${{ inputs.oci-image-path }}/.trivyignore
          else
            # dummy .trivyignore file
            file=.trivyignore
            touch $file
          fi
          echo "file=$file" >> "$GITHUB_OUTPUT"

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          # NOTE: we're allowing images with vulnerabilities to be published
          ignore-unfixed: true
          trivyignores: ${{ steps.trivyignore.outputs.file }}
          format: "cosign-vuln"
          severity: "HIGH,CRITICAL"
          exit-code: "1"
          # NOTE: pebble is flagged with a HIGH vuln because of golang.org/x/crypto
          # CVE-2021-43565, CVE-2022-27191
          skip-files: /bin/pebble
          # missing ${{ runner.arch }}
          output: "${{ steps.vulnerability-report.outputs.name }}"
          image-ref: "${{ steps.to-docker-daemon.outputs.name }}"

      - name: Process report
        if: ${{ !cancelled() }}
        id: check-report
        run: |
          report="${{ steps.vulnerability-report.outputs.name }}"
          echo "notify=false" >> "$GITHUB_OUTPUT"
          set -x
          vulnerabilities="$(jq -r -c '[
                  try(.scanner.result.Results[])
                  | .Target as $target
                  | .Vulnerabilities
                  | select(. != null)
                  | .[]
                  | {Target: $target, LastModifiedDate: .LastModifiedDate, VulnerabilityID: .VulnerabilityID,
                     PkgName: .PkgName, Severity: .Severity}
                ]' < $report)"
          echo "vulnerabilities=$vulnerabilities" >> "$GITHUB_OUTPUT"
          last_modified_dates="$(echo "$vulnerabilities" | jq -r '.[] | select(.LastModifiedDate != null) | .LastModifiedDate')"
          cat "$GITHUB_OUTPUT"
          # We want to notify only if the CVEs have been updated since the last
          # time this scan ran
          for cve_updated in $last_modified_dates
          do
            if [[ "$cve_updated" > "${{ inputs.date-last-scan }}" ]]
            then
              echo "notify=true" >> "$GITHUB_OUTPUT"
              break
            fi
          done

      - uses: actions/cache/save@v4
        if: ${{ !cancelled() }}
        with:
          path: ${{ steps.vulnerability-report.outputs.name }}
          key: ${{ github.run_id }}-${{ steps.vulnerability-report.outputs.name }}

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ steps.vulnerability-report.outputs.name }}
          path: ${{ steps.vulnerability-report.outputs.name }}

  test-malware:
    runs-on: ubuntu-22.04
    name: Malware scan
    needs: [unpack-rock]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.cache-key }}

      - name: Install Umoci
        run: |
          wget https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/${UMOCI_BINARY}
          sudo mv ${UMOCI_BINARY} /usr/bin/umoci
          sudo chmod +x /usr/bin/umoci

      - name: Unpack image
        run: |
          set -ex
          umoci unpack \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            --rootless raw

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - run: pip install -r src/tests/requirements.txt

      - name: Scan for malware
        run: |
          ./src/tests/malware_scan.py --filesystem ./raw/rootfs
