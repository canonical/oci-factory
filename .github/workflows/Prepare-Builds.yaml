name: Prepare Builds
on:
  push:
    paths:
      - "oci/*/builds.y*ml"
  pull_request:
    paths:
      - "oci/*/builds.y*ml"

jobs:
  prepare-build-matrix:
    runs-on: ubuntu-22.04
    name: Prepare new builds
    outputs:
      multi-image-build-matrix: ${{ steps.prepare-builds.outputs.multi-image-build-matrix }}
    steps:
      - name: Infer images to build
        uses: tj-actions/changed-files@v35
        id: changed-files
        with:
          json: true
          dir_names: "true"
          files: |
            oci/*/builds.y*ml

      - name: Prepare builds matrix
        id: prepare-builds
        run: |
          echo "multi-image-build-matrix={\"image-name\":${{ steps.changed-files.outputs.all_changed_files }}}" >> "$GITHUB_OUTPUT"


  trigger-build-pipelines:
    runs-on: ubuntu-22.04
    needs: [prepare-build-matrix]
    name: Trigger build pipelines
    env:
      IS_MAIN: ${{ github.ref_name == 'main' && true || false }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-build-matrix.outputs.multi-image-build-matrix) }}
    steps:
      - name: Invoke PR builds
        if: github.event_name == 'pull_request'
        uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: ${{ github.repository_owner }}
          repo: oci-factory
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_file_name: Builds.yaml
          ref: ${{ github.event.pull_request.head.ref }}
          comment_downstream_url: ${{ github.event.pull_request.comments_url }}
          client_payload: '{ "oci-image-name": "${{ matrix.image-name }}", "upload": false }' 
      - name: Invoke branch builds
        if: github.event_name != 'pull_request'
        uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: ${{ github.repository_owner }}
          repo: oci-factory
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_file_name: Builds.yaml
          ref: ${{ github.ref }}
          comment_downstream_url: ${{ github.event.pull_request.comments_url }}
          client_payload: '{ "oci-image-name": "${{ matrix.image-name }}", "upload": ${{ env.IS_MAIN }} }'     

  # uploads:
  #   runs-on: ubuntu-22.04
  #   needs: [prepare-build-matrix, run-builds]
  #   name: Upload
  #   if: ${{ always() && github.ref_name == 'main' }}
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJSON(needs.prepare-build-matrix.outputs.build-matrix) }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: actions/cache/restore@v3
  #       with:
  #         path: ${{ matrix.oci-archive-name }}
  #         key: ${{ github.run_id }}-${{ matrix.oci-archive-name }}
      
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"

  #     - run: |
  #         pip install -r src/uploads/requirements.txt
  #         ./src/uploads/requirements.sh

  #     - uses: actions/checkout@v3
  #       with:
  #         repository: ${{ matrix.source }}
  #         fetch-depth: 0
  #         path: source
      
  #     - run: cd source && git checkout ${{ matrix.commit }}

  #     - name: Infer track name
  #       id: infer-track
  #       env:
  #         DOCKERFILE_IMAGE_VERSION: ${{ matrix.dockerfile-build.version }}
  #       run: |
  #         ./src/uploads/infer_image_track.py --recipe-dirname source/${{ matrix.directory }}

  #     - name: Define image revision number
  #       id: define-revision
  #       env:
  #         OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  #         OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
  #         OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  #         OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
  #         OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
  #         IMAGE_NAME: ${{ matrix.name }}
  #         SWIFT_CONTAINER_NAME: ${{ vars.SWIFT_CONTAINER_NAME }}
  #       run: ./src/uploads/define_image_revision.sh
      
  #     - name: Login to GHCR
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Setup publishing environment
  #       env:
  #         ROCKS_DEV_LP_SSH_PRIVATE: ${{ secrets.ROCKS_DEV_LP_SSH_PRIVATE }}
  #         ROCKS_DEV_LP_USERNAME: ${{ secrets.ROCKS_DEV_LP_USERNAME }}
  #         CPC_BUILD_TOOLS_REPO: git.launchpad.net/~cloudware/cloudware/+git/cpc_build_tools
  #         CPC_BUILD_TOOLS_REPO_REF: 9b716ed8a8ba728d036b54b1bb17a8f49dbda434
  #         SKOPEO_BRANCH: 'v1.9.1'
  #         SKOPEO_URL: 'https://github.com/containers/skopeo'
  #       run: ./src/releases/requirements.sh
          
  #     - name: Upload to GHCR
  #       env:
  #         GHCR_REPO: ${{ github.repository_owner }}/oci-factory
  #         GHCR_USERNAME: ${{ github.actor }}
  #         GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         ./src/releases/tag_and_publish.sh ${{ matrix.oci-archive-name }} \
  #           ${{ matrix.name }} \
  #           ${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}

  #     #######
  #     only upload the revision number to Swift here, not before
  #     #######

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.name }}_${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}
  #         path: ${{ matrix.oci-archive-name }}
          
  # run-tests:
  #   needs: [run-builds]
  #   if: success()
  #   uses: ./.github/workflows/Test.yaml
  #   with:
  #     artifact-name: ${{ matrix.oci-archive-name }}