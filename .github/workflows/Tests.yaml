name: Tests
on:
  workflow_dispatch:
    inputs:
      oci-image-name:
        description: 'Name of the image to be fetched and tested'
        required: true
      test-from:
        description: 'From where to fetch the OCI image to be tested'
        required: true
        default: 'cache'
        type: choice
        options:
        - cache
        - registry
      is-a-rock:
        description: 'Run additional ROCK-specific tests'
        required: true
        type: boolean
        default: false

env:
  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.9'
  UMOCI_VERSION: 'v0.4.7'
  UMOCI_BINARY: 'umoci.amd64'

jobs:
  fetch-oci-image:
    runs-on: ubuntu-22.04
    name: Fetch OCI image for testing
    steps:
      - uses: actions/cache/restore@v3
        if: ${{ inputs.test-from == 'cache' }}
        with:
          path: ${{ inputs.oci-image-name }}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}

      - if: ${{ inputs.test-from == 'cache' }}
        run: |
          # from OCI ARCHIVE to OCI
          docker run --rm -v $PWD:/workdir \
            -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive://${{ inputs.oci-image-name }} \
            oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
      
      - if: ${{ inputs.test-from == 'registry' }}
        run: |
          # from REGISTRY to OCI
          docker run --rm -v $PWD:/out \
            ${{ env.SKOPEO_IMAGE }} \
            copy docker://${{ inputs.oci-image-name }} \
            oci:/out/${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - uses: actions/cache/save@v3
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}-${{ env.TEST_IMAGE_NAME }}


  test-oci-compliance:
    runs-on: ubuntu-22.04
    name: Test OCI compliance
    needs: [fetch-oci-image]
    steps:
      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}-${{ env.TEST_IMAGE_NAME }}

      - name: Install Umoci
        run: |
          wget https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/${UMOCI_BINARY}
          sudo mv ${UMOCI_BINARY} /usr/bin/umoci
          sudo chmod +x /usr/bin/umoci

      - name: Run Umoci tests
        run: |
          sudo umoci unpack --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            bundle

          umoci list --layout ${{ env.TEST_IMAGE_NAME}} | grep -w -c ${{ env.TEST_IMAGE_TAG }}


  test-black-box:
    runs-on: ubuntu-22.04
    name: Black-box tests
    needs: [fetch-oci-image]
    steps:
      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}-${{ env.TEST_IMAGE_NAME }}
      
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: pip install -r src/uploads/requirements.txt

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            -e IMG=${{ env.TEST_IMAGE_NAME}} -e TAG=${{ env.TEST_IMAGE_TAG }} \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci://${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
      
      - name: Test ROCK
        if: ${{ inputs.is-a-rock }}
        run: |
          set -ex
          docker run --rm ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            help | grep Pebble

      - uses: actions/checkout@v3

      - name: Dive efficiency test
        run: |
          ./src/tests/black_box_test.py --docker-image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}


  test-vulnerabilities:
    runs-on: ubuntu-22.04
    name: Vulnerability scan
    needs: [fetch-oci-image]
    env:
      TRIVY_VERSION: '0.38.3'
    outputs:
      vulnerability-report: ${{ steps.vulnerability-scan.outputs.report }}
    steps:
      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}-${{ env.TEST_IMAGE_NAME }}
      
      - name: Install Trivy
        run: |
          wget -O trivy.deb \
            'https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb'
          
          sudo dpkg -i trivy.deb

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            -e IMG=${{ env.TEST_IMAGE_NAME}} -e TAG=${{ env.TEST_IMAGE_TAG }} \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci://${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - name: Scan for vulnerabilities
        id: vulnerability-scan
        run: |
          set -ex
          vuln_report="${{ inputs.oci-image-name }}.vulnerability-report.json"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format cosign-vuln \
            --output $vuln_report \
            ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

          echo "report=${vuln_report}" >> "$GITHUB_OUTPUT"

      - uses: actions/cache/save@v3
        with:
          path: ${{ steps.vulnerability-scan.outputs.report }}
          key: ${{ github.run_id }}-${{ steps.vulnerability-scan.outputs.report }}

      
  test-malware:
    runs-on: ubuntu-22.04
    name: Malware scan
    needs: [fetch-oci-image]
    steps:
      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ github.run_id }}-${{ inputs.oci-image-name }}-${{ env.TEST_IMAGE_NAME }}
      
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: pip install -r src/uploads/requirements.txt

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            -e IMG=${{ env.TEST_IMAGE_NAME}} -e TAG=${{ env.TEST_IMAGE_TAG }} \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci://${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
      
      - name: Install Umoci
        run: |
          wget https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/${UMOCI_BINARY}
          sudo mv ${UMOCI_BINARY} /usr/bin/umoci
          sudo chmod +x /usr/bin/umoci

      - name: Test ROCK
        if: ${{ inputs.is-a-rock }}
        run: |
          set -ex
          docker run --rm ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            help | grep Pebble

      - uses: actions/checkout@v3

      - name: Dive efficiency test
        run: |
          ./src/tests/black_box_test.py --docker-image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}


  upload-test-artefacts:
    runs-on: ubuntu-22.04
    needs:
      - test-vulnerabilities
      - test-black-box
      - test-oci-compliance
    steps:
      - name: Restore vulnerability report for upload
        uses: actions/cache/restore@v3
        with:
          path: ${{ needs.test-vulnerabilities.outputs.vulnerability-report }}
          key: ${{ github.run_id }}-${{ needs.test-vulnerabilities.outputs.vulnerability-report }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.test-vulnerabilities.outputs.vulnerability-report }}
          path: ${{ needs.test-vulnerabilities.outputs.vulnerability-report }}