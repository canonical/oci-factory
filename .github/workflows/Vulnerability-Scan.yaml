name: Vulnerability Scan
run-name: 'Tests - ${{ inputs.oci-image-name }} - ${{ github.ref }}'

on:
  workflow_call:
    inputs:
      oci-image-name:
        description: 'Name of the image to be fetched and tested'
        required: true
        type: string
      oci-image-path:
        description: 'Path to the image in this repo (eg. "oci/foo")'
        required: true
        type: string
      cache-key:
        description: 'Key ID for restoring image (in OCI format) from cache'
        required: false
        type: string
        default: ''
      vulnerability-report-suffix:
        description: 'Suffix for the vulnerability report artefact'
        required: false
        type: string
        default: '.vulnerability-report.json'
      date-last-scan:
        description: 'If there are new CVEs after this date, we notify'
        required: false
        type: string
        default: '9999-12-31T23:59:59'
      create-issue:
        description: 'If to create a GitHub issues for found vulnerabilities'
        required: false
        type: boolean
        default: false

env:
  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'
  TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db,aquasec/trivy-db,ghcr.io/aquasecurity/trivy-db
  TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db,aquasec/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db

jobs:
  test-vulnerabilities:
    runs-on: ubuntu-22.04
    name: Vulnerability scan
    outputs:
      vulnerability-report: ${{ steps.vulnerability-report.outputs.name }}
      notify: ${{ steps.check-report.outputs.notify }}
      vulnerabilities: ${{ steps.check-report.outputs.vulnerabilities }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate access to triggered image
        uses: ./.github/actions/validate-actor
        if: ${{ github.repository == 'canonical/oci-factory' && !github.event.pull_request.head.repo.fork }}
        with:
          admin-only: true
          image-path: ${{ inputs.oci-image-path }}
          github-token: ${{ secrets.ROCKSBOT_TOKEN }}

      - id: vulnerability-report
        run: |
          full_name="${{ inputs.oci-image-name }}${{ inputs.vulnerability-report-suffix }}"
          final_name="$(echo ${full_name} | sed 's/ghcr.io\/canonical\/oci-factory\///g' | tr ':' '_')"
          echo "name=$final_name" >> "$GITHUB_OUTPUT" 

      - uses: actions/cache/restore@v4
        if: ${{ inputs.cache-key != '' }}
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true
      
      - name: Copy image to Docker daemon
        id: to-docker-daemon
        run: |
          d_img_name="${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}"
          echo "name=$d_img_name" >> "$GITHUB_OUTPUT"
          if [[ "${{ inputs.cache-key}}" != "" ]]
          then
            source=oci:${{ env.TEST_IMAGE_NAME}} 
          else
            source=docker://${{ inputs.oci-image-name }}
          fi
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy $source \
            docker-daemon:$d_img_name

      - name: Check for .trivyignore
        id: trivyignore
        run: |
          if [ -f ${{ inputs.oci-image-path }}/.trivyignore ]
          then
            file=${{ inputs.oci-image-path }}/.trivyignore
          else
            # dummy .trivyignore file
            file=.trivyignore
            touch $file
          fi
          echo "file=$file" >> "$GITHUB_OUTPUT"

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          # NOTE: we're allowing images with vulnerabilities to be published
          ignore-unfixed: true
          trivyignores: ${{ steps.trivyignore.outputs.file }}
          format: 'cosign-vuln'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          # NOTE: pebble is flagged with a HIGH vuln because of golang.org/x/crypto
          # CVE-2021-43565, CVE-2022-27191
          skip-files: "/bin/pebble,/usr/bin/pebble"
          # missing ${{ runner.arch }}
          output: '${{ steps.vulnerability-report.outputs.name }}'
          image-ref: '${{ steps.to-docker-daemon.outputs.name }}'

      - name: Process report
        if: ${{ !cancelled() }}
        id: check-report
        run: |
          report="${{ steps.vulnerability-report.outputs.name }}"
          echo "notify=false" >> "$GITHUB_OUTPUT"
          set -x
          vulnerabilities="$(jq -r -c '[
                  try(.scanner.result.Results[])
                  | .Target as $target
                  | .Vulnerabilities
                  | select(. != null)
                  | .[]
                  | {Target: $target, LastModifiedDate: .LastModifiedDate, VulnerabilityID: .VulnerabilityID,
                     PkgName: .PkgName, Severity: .Severity}
                ]' < $report)"
          echo "vulnerabilities=$vulnerabilities" >> "$GITHUB_OUTPUT"
          last_modified_dates="$(echo "$vulnerabilities" | jq -r '.[] | select(.LastModifiedDate != null) | .LastModifiedDate')"
          cat "$GITHUB_OUTPUT"
          # We want to notify only if the CVEs have been updated since the last
          # time this scan ran
          for cve_updated in $last_modified_dates
          do
            if [[ "$cve_updated" > "${{ inputs.date-last-scan }}" ]]
            then
              echo "notify=true" >> "$GITHUB_OUTPUT"
              break
            fi
          done

      - uses: actions/cache/save@v4
        if: ${{ !cancelled() }}
        with:
          path: ${{ steps.vulnerability-report.outputs.name }}
          key: ${{ github.run_id }}-${{ steps.vulnerability-report.outputs.name }}

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ steps.vulnerability-report.outputs.name }}
          path: ${{ steps.vulnerability-report.outputs.name }}


  # Many workflows are now using a similar notification job. It would be better
  # if this was a common workflows reachable via a workflow_call
  notify:
    runs-on: ubuntu-22.04
    name: Notify on failure
    needs:
      - test-vulnerabilities
    if: ${{ !cancelled() && needs.test-vulnerabilities.outputs.notify == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get contacts for ${{ inputs.oci-image-name }}
        id: get-contacts
        working-directory: ${{ inputs.oci-image-path }}
        run: |
          mm_channels=$(yq -r '.notify | ."mattermost-channels" | join(",")' < contacts.y*ml)
          echo "mattermost-channels=${mm_channels}" >> "$GITHUB_OUTPUT"

      - name: Notify via Mattermost
        env:
          MM_BOT_TOKEN: ${{ secrets.MM_BOT_TOKEN }}
          FINAL_STATUS: failure
          MM_SERVER: ${{ secrets.MM_SERVER }}
          URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SUMMARY: ''
          FOOTER: ''
          TITLE: 'Vulnerabilities found for ${{ inputs.oci-image-name }}'
        run: |
          for channel in $(echo ${{ steps.get-contacts.outputs.mattermost-channels }} | tr ',' ' ')
          do
            MM_CHANNEL_ID="${channel}" ./src/notifications/send_to_mattermost.sh
          done

  issue:
    runs-on: ubuntu-22.04
    name: Create issue
    needs:
      - test-vulnerabilities
    env:
      GITHUB_TOKEN: ${{ secrets.ROCKSBOT_TOKEN }}
    if: ${{ !cancelled() && github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: pip install pydantic==2.8.2

      - id: simplify-image-name
        run: |
          img_name_with_tag=$(echo "${{ inputs.oci-image-name }}" | sed -r 's|.*/([a-zA-Z0-9-]+:[0-9.-]+_[0-9])+|\1|')
          img_revision=$(echo "${img_name_with_tag}" | cut -d '_' -f 2)
          echo "img_revision=$img_revision" >> "$GITHUB_OUTPUT"
          echo "img_name_with_tag=$img_name_with_tag" >> "$GITHUB_OUTPUT"

      # We assume that the sources within image.yaml are the same
      - name: Get image repo
        id: get-image-repo
        run: |
          img_repo=$(yq -r '.upload.[].source' ${{ github.workspace }}/${{ inputs.oci-image-path }}/image.yaml | head -n 1)
          echo "img-repo=$img_repo" >> "$GITHUB_OUTPUT"

      # We have to walk through the vulnerabilities since trivy does not support outputting the results as Markdown
      - name: Create markdown content
        id: create-markdown
        run: |
          set -x
          num_vulns=$(echo '${{ needs.test-vulnerabilities.outputs.vulnerabilities }}' | jq -r 'length')
          vulnerability_exists=$([[ $num_vulns -gt 0 ]] && echo 'true' || echo 'false')
          echo "vulnerability-exists=$vulnerability_exists" >> "$GITHUB_OUTPUT"
          if [[ $vulnerability_exists == 'true' ]]; then
            title="Vulnerabilities found for ${{ steps.simplify-image-name.outputs.img_name_with_tag }}"
            echo "## $title" > issue.md
            echo "| ID | Target | Severity | Package |" >> issue.md
            echo "| -- | ----- | -------- | ------- |" >> issue.md
            echo '${{ needs.test-vulnerabilities.outputs.vulnerabilities }}' | jq -r '.[] | "| \(.VulnerabilityID) | /\(.Target) | \(.Severity) | \(.PkgName) |"' >> issue.md
            if [[ ${{ inputs.create-issue }} == 'true' ]]; then
              revision_to_released_tags=$(python3 -m src.shared.release_info get_revision_to_released_tags --all-releases ${{ inputs.oci-image-path }}/_releases.json)
              affected_tracks=$(echo "${revision_to_released_tags}" | jq -r '."${{ steps.simplify-image-name.outputs.img_revision }}" | map("- `\(.)`") | join("\n")')
              echo -e "\n### Affected tracks:" >> issue.md
              echo -e "${affected_tracks}" >> issue.md
              echo -e "\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> issue.md
            fi
            echo "issue-title=$title" >> "$GITHUB_OUTPUT"
            echo "issue-body-file=issue.md" >> "$GITHUB_OUTPUT"
          fi

      - name: Write to summary
        if: ${{ !inputs.create-issue && steps.create-markdown.outputs.vulnerability-exists == 'true' }}
        run: |
          echo "# Vulnerabilities found for ${{ inputs.oci-image-name }}" >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.create-markdown.outputs.issue-body-file }} | tail -n +2 >> $GITHUB_STEP_SUMMARY

      - id: issue-exists
        if: ${{ inputs.create-issue}}
        run: |
          issue_number=$(gh issue list --repo ${{ steps.get-image-repo.outputs.img-repo }} --json "number,title" \
                  | jq -r '.[] | select(.title == "${{ steps.create-markdown.outputs.issue-title }}") | .number')
          echo "issue-exists=$([[ -n "$issue_number" ]] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          echo "issue-number=$issue_number" >> "$GITHUB_OUTPUT"


      # Truth table for issue creation
      # | issue-exists | notify | vulnerability-exists |   op   |
      # |--------------|--------|----------------------|--------|
      # |      T       |   T    |          T           | update |
      # |      T       |   T    |          F           |  never |
      # |      T       |   F    |          T           |   nop  |
      # |      T       |   F    |          F           |  close |
      # |      F       |   T    |          T           | create |
      # |      F       |   T    |          F           |  never |
      # |      F       |   F    |          T           | create |
      # |      F       |   F    |          F           |   nop  |
      
      - name: Notify via GitHub issue
        if: ${{ steps.create-markdown.outputs.vulnerability-exists == 'true' && inputs.create-issue }}
        run: |
          set -x
          op=nop
          if [[ ${{ steps.issue-exists.outputs.issue-exists }}  == 'false' ]]; then
            op="create"
          elif [[ ${{ steps.issue-exists.outputs.issue-exists }} == 'true' \
                  && ${{ needs.test-vulnerabilities.outputs.notify }} == 'true' ]]; then
            op="edit ${{ steps.issue-exists.outputs.issue-number }}"
          fi
          if [[ $op != 'nop' ]]; then
            gh issue $op --repo ${{ steps.get-image-repo.outputs.img-repo }} \
              --title "${{ steps.create-markdown.outputs.issue-title }}" \
              --body-file "${{ steps.create-markdown.outputs.issue-body-file }}"
          fi

      - name: Close issue
        if: |
          needs.test-vulnerabilities.result == 'success' && 
          steps.issue-exists.outputs.issue-exists == 'true' && 
          steps.create-markdown.outputs.vulnerability-exists == 'false' && 
          inputs.create-issue
        run: |
          gh issue close ${{ steps.issue-exists.outputs.issue-number }} --repo ${{ steps.get-image-repo.outputs.img-repo }}
