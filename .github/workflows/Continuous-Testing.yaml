name: Continuous image testing

on:
  schedule:
    - cron: "0 1 * * *"

jobs:
  prepare-test-matrix:
    runs-on: ubuntu-latest
    name: Prepare released image revisions to be tested
    outputs:
      released-revisions-matrix: ${{ steps.prepare-test-matrix.outputs.released-revisions-matrix }}
      last-scan: ${{ steps.last-scan.outputs.date }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: pip install -r src/tests/requirements.txt

      - name: Prepare test matrix
        id: prepare-test-matrix
        run: ./src/tests/get_released_revisions.py --oci-images-path $PWD/oci

      - name: Infer date of last scan
        id: last-scan
        run: |
          # This is scheduled to run every day, so let's look at the previous
          # 26 hours, roughly
          set -ex
          last_scan="$(date --date='26 hours ago' +'%Y-%m-%dT%H:%M:00Z')"
          echo "date=$last_scan" >> "$GITHUB_OUTPUT"

  run-tests:
    name: Run tests for released images
    needs: [prepare-test-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-test-matrix.outputs.released-revisions-matrix) }}
    uses: canonical/oci-factory/.github/workflows/Vulnerability-Scan.yaml@main
    with:
      oci-image-name: "${{ matrix.source-image }}"
      oci-image-path: "oci/${{ matrix.name }}"
      date-last-scan: ${{ needs.prepare-test-matrix.outputs.last-scan }}
    secrets: inherit

  issue:
    runs-on: ubuntu-22.04
    name: Create issue
    if: ${{ !cancelled() }}
    needs:
      - run-tests
    env:
      GITHUB_TOKEN: ${{ secrets.ROCKSBOT_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - id: simplify-image-name
        run: |
          img_name=$(echo "${{ inputs.oci-image-name }}" | sed -r 's|.*/([a-zA-Z0-9-]+:[0-9.-]+)_[0-9]+|\1|')
          echo "img_name=$img_name" >> "$GITHUB_OUTPUT"

      # We assume that the sources within image.yaml are the same
      - name: Get image repo
        id: get-image-repo
        run: |
          img_repo=$(yq -r '.upload.[].source' ${{ github.workspace }}/${{ inputs.oci-image-path }}/image.yaml | head -n 1)
          echo "img-repo=$img_repo" >> "$GITHUB_OUTPUT"

      # We have to walk through the vulnerabilities since trivy does not support outputting the results as Markdown
      - name: Create Markdown Content
        id: create-markdown
        run: |
          set -x
          title="Vulnerabilities found for ${{ steps.simplify-image-name.outputs.img_name }}"
          echo "## $title" > issue.md
          echo "| ID | Target | Severity | Package |" >> issue.md
          echo "| -- | ----- | -------- | ------- |" >> issue.md
          echo '${{ needs.run-tests.outputs.vulnerabilities }}' | jq -r '.[] | "| \(.VulnerabilityID) | /\(.Target) | \(.Severity) | \(.PkgName) |"' >> issue.md
          echo -e "\nDetails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> issue.md
          num_vulns=$(echo '${{ needs.run-tests.outputs.vulnerabilities }}' | jq -r 'length')
          echo "issue-title=$title" >> "$GITHUB_OUTPUT"
          echo "issue-body-file=issue.md" >> "$GITHUB_OUTPUT"
          echo "vulnerability-exists=$([[ $num_vulns -gt 0 ]] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"

      - id: issue-exists
        run: |
          issue_number=$(gh issue list --repo ${{ steps.get-image-repo.outputs.img-repo }} --json "number,title" \
                  | jq -r '.[] | select(.title == "${{ steps.create-markdown.outputs.issue-title }}") | .number')
          echo "issue-exists=$([[ -n "$issue_number" ]] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          echo "issue-number=$issue_number" >> "$GITHUB_OUTPUT"


      # Truth table for issue creation
      # | issue-exists | notify | vulnerability-exists |   op   |
      # |--------------|--------|----------------------|--------|
      # |      T       |   T    |          T           | update |
      # |      T       |   T    |          F           |  never |
      # |      T       |   F    |          T           |   nop  |
      # |      T       |   F    |          F           |  close |
      # |      F       |   T    |          T           | create |
      # |      F       |   T    |          F           |  never |
      # |      F       |   F    |          T           | create |
      # |      F       |   F    |          F           |   nop  |
      
      - name: Notify via GitHub issue
        if: ${{ steps.create-markdown.outputs.vulnerability-exists == 'true' }}
        run: |
          set -x
          op=nop
          if [[ ${{ steps.issue-exists.outputs.issue-exists }}  == 'false' ]]; then
            op="create"
          elif [[ ${{ steps.issue-exists.outputs.issue-exists }} == 'true' \
                  && ${{ needs.test-vulnerabilities.outputs.notify }} == 'true' ]]; then
            op="edit ${{ steps.issue-exists.outputs.issue-number }}"
          fi
          if [[ $op != 'nop' ]]; then
            gh issue $op --repo ${{ steps.get-image-repo.outputs.img-repo }} \
              --title "Vulnerabilities found for ${{ steps.simplify-image-name.outputs.img_name }}" \
              --body-file "${{ steps.create-markdown.outputs.issue-body-file }}"
          fi

      - name: Close issue
        if: ${{ steps.create-markdown.outputs.vulnerability-exists == 'false' && steps.issue-exists.outputs.issue-exists == 'true' && steps.create-markdown.outputs.vulnerability-exists == 'false' }}
        run: |
          gh issue close ${{ steps.issue-exists.outputs.issue-number }} --repo ${{ steps.get-image-repo.outputs.img-repo }}
