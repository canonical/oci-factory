name: Builds
on:
  workflow_dispatch:
    inputs:
      oci-image-name:
        description: 'OCI image to build and test'
        required: true
      upload:
        description: 'Upload image to GHCR'
        required: true
        type: boolean
        default: false

jobs:
  prepare-build:
    runs-on: ubuntu-22.04
    name: Prepare build
    outputs:
      build-matrix: ${{ steps.prepare-matrix.outputs.build-matrix }}
      release-to: ${{ steps.prepare-matrix.outputs.release-to }}
      oci-img-path: ${{ steps.validate-image.outputs.img-path }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate image from dispatch
        id: validate-image
        run: |
          img_path="oci/${{ inputs.oci-image-name }}"
          test -d "${img_path}"

          echo "img-path=${img_path}" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - run: pip install -r src/builds/requirements.txt

      - name: Validate and prepare builds matrix
        id: prepare-matrix
        run: |
          ./src/builds/prepare_single_image_build_matrix.py \
            --oci-path ${{ steps.validate-image.outputs.img-path }}

  run-build:
    runs-on: ubuntu-22.04
    needs: [prepare-build]
    name: Build
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.prepare-build.outputs.build-matrix) }}
    env:
      OCI_ARCHIVE_NAME: ${{ matrix.name }}_${{ matrix.commit }}_${{ matrix.build_number }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
      
      - run: git checkout ${{ matrix.commit }}

      - name: Validate image naming and base
        working-directory: ${{ matrix.directory }}
        env:
          YQ_VERSION: 'v4.32.2'
          YQ_BINARY: yq_linux_amd64
        run: |
          if [ -z ${{ matrix.dockerfile-build }} ]
          then
            wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/${{ env.YQ_BINARY }}
            sudo mv ${{ env.YQ_BINARY }} /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            
            rock_name=`cat rockcraft.y*ml | yq -r .name`
            if [[ "${{ matrix.path }}" != *"${rock_name}"* ]]
            then
              echo "ERROR: the ROCK's name '${rock_name}' must match the OCI folder name!"
              exit 1
            fi
          else
            grep 'FROM' Dockerfile | tail -1 | grep ubuntu || \
              (echo "ERROR: the image '${rock_name}' must be based on Ubuntu!" \
                && exit 1)
          fi

      # If this is a ROCK...
      - name: Build ROCK ${{ matrix.name }}
        if: matrix.dockerfile-build == ''
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ matrix.directory }}"
          verbosity: debug

      - name: Rename ROCK OCI archive
        if: matrix.dockerfile-build == ''
        run: |
          mv ${{ steps.rockcraft.outputs.rock }} ${{ env.OCI_ARCHIVE_NAME }}   
          
      # If this is a Dockerfile-based image...
      - name: Set up QEMU
        if: matrix.dockerfile-build != ''
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: matrix.dockerfile-build != ''
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Form the platforms string
        if: matrix.dockerfile-build != ''
        id: buildx-platforms
        run: |
          sudo apt install -y jq
          platforms=$(echo linux/$(echo '${{ toJSON(matrix.dockerfile-build.platforms) }}' | jq -r 'join(",linux/")'))
          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"
        
      - name: Build OCI image ${{ matrix.name }}
        if: matrix.dockerfile-build != ''
        uses: docker/build-push-action@v4
        with:
          context: '${{ matrix.directory }}'
          outputs: 'type=oci,dest=${{ env.OCI_ARCHIVE_NAME }}'
          platforms: ${{ steps.buildx-platforms.outputs.platforms }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - uses: actions/cache/save@v3
        with:
          path: ${{ env.OCI_ARCHIVE_NAME }}
          key: ${{ github.run_id }}-${{ env.OCI_ARCHIVE_NAME }}


  upload:
    runs-on: ubuntu-22.04
    needs: [prepare-build, run-build]
    name: Upload
    if: ${{ inputs.upload }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.prepare-build.outputs.build-matrix) }}
    env:
      OCI_ARCHIVE_NAME: ${{ matrix.name }}_${{ matrix.commit }}_${{ matrix.build_number }}
      VULNERABILITY_REPORT_SUFFIX: '.vulnerability-report.json'
    outputs:
      artefacts-hashes: ${{ steps.artefacts-hashes.outputs.hashes }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup environment
        env:
          ROCKS_DEV_LP_SSH_PRIVATE: ${{ secrets.ROCKS_DEV_LP_SSH_PRIVATE }}
          ROCKS_DEV_LP_USERNAME: ${{ secrets.ROCKS_DEV_LP_USERNAME }}
          CPC_BUILD_TOOLS_REPO: git.launchpad.net/~cloudware/cloudware/+git/cpc_build_tools
          # CPC_BUILD_TOOLS_REPO_REF: 9b716ed8a8ba728d036b54b1bb17a8f49dbda434
          SKOPEO_BRANCH: 'v1.9.1'
          SKOPEO_URL: 'https://github.com/containers/skopeo'
        run: |
          ./src/releases/requirements.sh
          ./src/uploads/requirements.sh
          pip install -r src/uploads/requirements.txt -r src/releases/requirements.txt

      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
          path: source

      - run: cd source && git checkout ${{ matrix.commit }}

      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.OCI_ARCHIVE_NAME }}
          key: ${{ github.run_id }}-${{ env.OCI_ARCHIVE_NAME }}
          fail-on-cache-miss: true

      - name: Define build revision number
        id: get-build-revision
        env:
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
          OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
          IMAGE_NAME: ${{ matrix.name }}
          SWIFT_CONTAINER_NAME: ${{ vars.SWIFT_CONTAINER_NAME }}
        run: ./src/uploads/define_image_revision.sh

      - name: Define image revision number
        id: get-revision
        run: |
          set -ex
          this_image_revision=$(( ${{ steps.get-build-revision.outputs.revision }} + ${{ matrix.build_number }} ))

          echo "revision=${this_image_revision}" >> "$GITHUB_OUTPUT"

      - name: Infer track name
        id: get-track
        env:
          DOCKERFILE_IMAGE_VERSION: ${{ matrix.dockerfile-build.version }}
        run: |
          ./src/uploads/infer_image_track.py --recipe-dirname source/${{ matrix.directory }}

      - name: Name output artefact
        id: rename-oci-archive
        run: |
          # Rename the OCI archive tarball
          canonical_tag="${{ steps.get-track.outputs.track }}_${{ steps.get-revision.outputs.revision }}"
          name="${{ matrix.name }}_${canonical_tag}"
          mv ${{ env.OCI_ARCHIVE_NAME }} $name

          echo "name=${name}" >> "$GITHUB_OUTPUT"
          echo "canonical-tag=${canonical_tag}" >> "$GITHUB_OUTPUT"
      
      - uses: actions/cache/save@v3
        with:
          path: ${{ steps.rename-oci-archive.outputs.name }}
          key: ${{ github.run_id }}-${{ steps.rename-oci-archive.outputs.name }}
        
      - name: Run tests
        # Using this actions cause others can have this problem:
        # https://github.com/convictional/trigger-workflow-and-wait/issues/61
        uses: mathze/workflow-dispatch-action@v1.2.0
        id: run-tests
        env:
          IS_A_ROCK: ${{ matrix.dockerfile-build == '' && true || false }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail-on-error: true
          workflow-name: Tests.yaml
          payload: '{ "oci-image-name": "${{ steps.rename-oci-archive.outputs.name }}", "is-a-rock": ${{ env.IS_A_ROCK }}, "cache-key": "${{ github.run_id }}-${{ steps.rename-oci-archive.outputs.name }}", "vulnerability-report-suffix": "${{ env.VULNERABILITY_REPORT_SUFFIX }}" }'
          use-marker-step: true
          trigger-timeout: '3m'

      - name: Wait for tests
        uses: mathze/workflow-dispatch-action@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.run-tests.outputs.run-id }}
          wait-interval: 10s
      
      - name: Download vulnerability artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Tests.yaml
          run_id: ${{ steps.run-tests.outputs.run-id }}
          path: '.'
          name: ${{ steps.rename-oci-archive.outputs.name }}${{ env.VULNERABILITY_REPORT_SUFFIX }}.zip

      - run: ls *
      
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0
        with:
          syft-version: 'v0.75.0'
    
      - name: Infer architectures
        id: get-arches
        run: |
          set -ex
          arches=$(skopeo inspect --raw \
            oci-archive:${{ steps.rename-oci-archive.outputs.name }} \
            | jq -r 'if has("manifests") then .manifests[].platform.architecture else "${{ runner.arch }}" end' \
            | jq -nRcr '[inputs] | join(" ")')

          echo "Detected architectures: ${arches}"
          echo "arches='${arches}'" >> "$GITHUB_OUTPUT"

      - name: Generate SBOMs
        id: generate-sboms
        run: |
          set -ex
          echo "Generating SBOMs for ${{ steps.get-arches.outputs.arches }}"

          IFS=' ' read -ra arch_list <<< ${{ steps.get-arches.outputs.arches }}
          for arch in "${arch_list[@]}"; do
            if [[ "${arch}" == "unknown" ]]; then
              continue
            fi

            echo "Generate SBOM for ${arch}"

            skopeo --override-arch $arch copy \
              oci-archive:${{ steps.rename-oci-archive.outputs.name }} \
              oci-archive:${{ steps.rename-oci-archive.outputs.name }}.${arch}

            syft oci-archive:${{ steps.rename-oci-archive.outputs.name }}.${arch} \
              -o spdx-json \
              --file ${{ steps.rename-oci-archive.outputs.name }}.${arch}.sbom.spdx.json
          done

          all_sboms_zip="${{ steps.rename-oci-archive.outputs.name }}.sbom.spdx.zip"
          zip "${all_sboms_zip}" ${{ steps.rename-oci-archive.outputs.name }}.*.sbom.spdx.json

          echo "sboms=${all_sboms_zip}" >> "$GITHUB_OUTPUT"

      # https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
      - name: Calculate artefacts hashes
        id: artefacts-hashes
        env:
          VULN_REPORT: ${{ steps.rename-oci-archive.outputs.name }}${{ env.VULNERABILITY_REPORT_SUFFIX }}
          SBOMS: ${{ steps.generate-sboms.outputs.sboms }}
          OCI_IMAGE_ARCHIVE: ${{ steps.rename-oci-archive.outputs.name }}
        run: |
          set -ex
          echo "hashes=$(sha256sum ${{ env.VULN_REPORT }} ${{ env.OCI_IMAGE_ARCHIVE }} ${{ env.SBOMS }} | base64 -w0)"
      
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.generate-sboms.outputs.sboms }}
          path: ${{ steps.generate-sboms.outputs.sboms }}
          if-no-files-found: error
      
      - name: Upload vulnerability report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.rename-oci-archive.outputs.name }}${{ env.VULNERABILITY_REPORT_SUFFIX }}
          path: ${{ steps.rename-oci-archive.outputs.name }}${{ env.VULNERABILITY_REPORT_SUFFIX }}
          if-no-files-found: error

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.rename-oci-archive.outputs.name }}
          path: ${{ steps.rename-oci-archive.outputs.name }}
          if-no-files-found: error

      - name: Upload to GHCR
        env:
          GHCR_REPO: ghcr.io/${{ github.repository_owner }}/oci-factory
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          oci_images="${PWD}/images-oci"
          rm -fr $oci_images
          mkdir -p $oci_images  

          tar -xf ${{ steps.rename-oci-archive.outputs.name }} -C $oci_images

          source="oci:${oci_images}"

          ./src/releases/tag_and_publish.sh "${source}" \
            ${{ matrix.name }} \
            ${{ steps.rename-oci-archive.outputs.canonical-tag }}

      - name: Upload build metadata to Swift
        env:
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
          OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
          IMAGE_NAME: ${{ matrix.name }}
          SWIFT_CONTAINER_NAME: ${{ vars.SWIFT_CONTAINER_NAME }}
        run: |
          jq <<< '${{ toJSON(matrix) }}' > build_metadata.json
          ./src/uploads/upload_to_swift.sh \
            ${{ matrix.name }} \
            ${{ steps.get-track.outputs.track }} \
            ${{ steps.get-revision.outputs.revision }} \
            build_metadata.json \
            ${{ steps.generate-sboms.outputs.sboms }} \
            ${{ steps.rename-oci-archive.outputs.name }}${{ env.VULNERABILITY_REPORT_SUFFIX }}

      - name: Create Git tag  
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "${{ steps.rename-oci-archive.outputs.name }}"
          message: 'upload(${{ matrix.name }}): Build and upload new image revision ${{ steps.get-revision.outputs.revision }}'
          force_push_tag: true
          github_token: ${{ secrets.ROCKSBOT_TOKEN }}

      - name: Prepare releases
        id: prepare-releases
        run: |
          set -x
          file="${{ steps.rename-oci-archive.outputs.name }}.pre-release.json"

          if [ ! -z ${{ matrix.release-to }} ]
          then
            risks=$(echo '${{ toJSON(matrix.release-to.risks) }}' | jq -r 'join(",")')
            
            jq -n --arg track ${{ steps.get-track.outputs.track }} '{"track": $track}' \
              | jq --arg revision ${{ steps.get-revision.outputs.revision }} ' . + {"revision": $revision}' \
              | jq --arg risks $risks '. + {"risks": $risks}' > $file
          else
            echo '{}' > $file
          fi

          echo "pre-release-file=$file" >> "$GITHUB_OUTPUT"

      - name: Upload pre-release artefacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare-releases.outputs.pre-release-file }}
          path: ${{ steps.prepare-releases.outputs.pre-release-file }}
          if-no-files-found: error


  # We need this job because the releases.yaml should be updated with a
  # single commit. If we update it within a matrix, we risk having conflicts
  prepare-releases:
    name: Prepare releases
    needs: [prepare-build, upload]
    runs-on: ubuntu-22.04
    if: ${{ needs.prepare-build.outputs.release-to != '' }}
    concurrency:
      group: ${{ needs.prepare-build.outputs.oci-img-path }}
      cancel-in-progress: true
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - run: pip install -r src/releases/requirements.txt

      - uses: actions/download-artifact@v3
        id: download
        with:
          path: artifacts

      - name: Update releases trigger
        id: update-releases-trigger
        run: |
          set -ex
          for pre_release_file in `ls ${{ steps.download.outputs.download-path }}/*/*.pre-release.json`
          do
            ret=0
            track=$(jq -er .track < $pre_release_file) || ret=1
            
            if [ $ret -eq 1 ]
            then
              echo "Nothing marked for release in $pre_release_file"
              continue
            fi

            revision=$(jq -er .revision < $pre_release_file)
            risks=$(jq -er .risks < $pre_release_file)
            ./src/releases/update_releases_file.py \
              --releases-trigger "${{ needs.prepare-build.outputs.oci-img-path }}/releases.yaml" \
              --release-to-risks "${risks}" \
              --release-to-track "${track}" \
              --revision "${revision}"
          done
          
          echo "releases-trigger=${{ needs.prepare-build.outputs.oci-img-path }}/releases.yaml" >> "$GITHUB_OUTPUT"

      - name: Trigger releases via commit
        uses: actions-x/commit@v6
        with:
          token: ${{ secrets.ROCKSBOT_TOKEN }}
          branch: 'main'
          message: 'ci: automatic trigger of releases for ${{ needs.prepare-build.outputs.oci-img-path }}, from ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          files: ${{ steps.update-releases-trigger.outputs.releases-trigger }}
          email: rocks-dev@lists.canonical.com

          
  generate-provenance:
    name: Generate SLSA provenance
    needs: [upload]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
        id: download
        with:
          path: artifacts
    
      - name: Generate provenance
        uses: philips-labs/slsa-provenance-action@v0.8.0
        with:
          command: generate
          subcommand: files
          arguments: --artifact-path ${{ steps.download.outputs.download-path }} --output-path provenance.json
          
      # - uses: sigstore/cosign-installer@v3.0.1
      #   with:
      #     cosign-release: 'v2.0.0' 

      # - name: Sign provenance file
      #   env:
      #     PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      #     PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
      #   run: |
      #     echo "${PRIVATE_KEY}" > cosign.key
      #     echo "${PUBLIC_KEY}" > cosign.pub
      #     cosign sign-blob --key cosign.key --output-signature provenance.json.sig provenance.json

      # - name: Upload verification keys
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: verify
      #     path: |
      #       cosign.pub
      #       provenance.json.sig
      #     if-no-files-found: error

      # - name: Generate checksums
      #   working-directory: ${{ steps.download.outputs.download-path }}
      #   run: sha256sum * > SHA256SUMS || true
      
      # - name: Upload SHA256SUMS file
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: SHA256SUMS
      #     path: SHA256SUMS
      #     if-no-files-found: error

      - name: Upload provenance file
        uses: actions/upload-artifact@v3
        with:
          name: provenance
          path: provenance.json
          if-no-files-found: error

  # generate-provenance:
  #   name: Generate SLSA provenance
  #   needs: [upload]
  #   permissions:
  #     actions: read # Needed for detection of GitHub Actions environment.
  #     id-token: write # Needed for provenance signing and ID
  #     contents: write # Needed for release uploads
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.5.0
  #   with:
  #     base64-subjects: "${{ needs.upload.outputs.artefacts-hashes }}"


  # notifications:
  #   name: Notify
  #   needs: [upload]
  #   if: failure()
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Get Maintainer contacts
  #       id: contacts-file
  #       run: |
  #         set -x
  #         contacts_path="oci/${{ inputs.oci-image-name }}/contacts.yaml"
  #         test -f "${contacts_path}"

  #         echo "path=${contacts_path}" >> "$GITHUB_OUTPUT"

  
  
  
  
  