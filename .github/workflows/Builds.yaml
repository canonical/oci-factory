name: Build
on:
  workflow_dispatch:
    inputs:
      oci-image-names:
        description: 'Comma-separated names of the OCI images to build and test'
        required: true
  push:
    paths:
      - "oci/*/builds.y*ml"
  pull_request:
    paths:
      - "oci/*/builds.y*ml"

jobs:
  prepare-build-matrix:
    runs-on: ubuntu-22.04
    name: Prepare new builds
    outputs:
      build-matrix: ${{ steps.prepare-builds.outputs.build-matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Infer images to build
        if: github.event_name != 'workflow_dispatch'
        uses: tj-actions/changed-files@v35
        with:
          json: true
          dir_names: "true"
          write_output_files: true
          files: |
            oci/*/builds.y*ml

      - name: Validate images from dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          for img in $(echo ${{ inputs.oci-image-names }} | tr ',' ' ')
          do
            test -d "oci/${img}"
          done

          changed_files="$(echo '["'${{ inputs.oci-image-names }}'"]' \
              | jq -c '.[0] | split(",") | map("oci/" + .)')"
          
          mkdir -p .github/outputs
          echo "${changed_files}" > .github/outputs/all_changed_files.json

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - run: pip install -r src/builds/requirements.txt

      - name: Validate and prepare builds matrix
        id: prepare-builds
        run: |
          ./src/builds/prepare_multi_image_build_matrix.py \
            --oci-dirs-file ".github/outputs/all_changed_files.json"

  run-builds:
    runs-on: ubuntu-22.04
    needs: [prepare-build-matrix]
    name: Build
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-build-matrix.outputs.build-matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
      
      - run: git checkout ${{ matrix.commit }}

      - name: Validate image naming and base
        working-directory: ${{ matrix.directory }}
        env:
          YQ_VERSION: 'v4.32.2'
          YQ_BINARY: yq_linux_amd64
        run: |
          if [ -z ${{ matrix.dockerfile-build }} ]
          then
            wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/${{ env.YQ_BINARY }}
            sudo mv ${{ env.YQ_BINARY }} /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            
            rock_name=`cat rockcraft.y*ml | yq -r .name`
            if [[ "${{ matrix.path }}" != *"${rock_name}"* ]]
            then
              echo "ERROR: the ROCK's name '${rock_name}' must match the OCI folder name!"
              exit 1
            fi
          else
            grep 'FROM' Dockerfile | tail -1 | grep ubuntu || \
              (echo "ERROR: the image '${rock_name}' must be based on Ubuntu!" \
                && exit 1)
          fi

      - name: Build ROCK ${{ matrix.name }}
        if: matrix.dockerfile-build == ''
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ matrix.directory }}"
          verbosity: debug

      - name: Rename ROCK OCI archive
        if: matrix.dockerfile-build == ''
        run: |
          mv ${{ steps.rockcraft.outputs.rock }} ${{ matrix.oci-archive-name }}

      - name: Set up QEMU
        if: matrix.dockerfile-build != ''
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: matrix.dockerfile-build != ''
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Form the platforms string
        if: matrix.dockerfile-build != ''
        id: buildx-platforms
        run: |
          sudo apt install -y jq
          platforms=$(echo linux/$(echo '${{ toJSON(matrix.dockerfile-build.platforms) }}' | jq -r 'join(",linux/")'))
          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"
        
      - name: Build OCI image ${{ matrix.name }}
        if: matrix.dockerfile-build != ''
        uses: docker/build-push-action@v4
        with:
          context: '${{ matrix.directory }}'
          outputs: 'type=oci,dest=${{ matrix.oci-archive-name }}'
          platforms: ${{ steps.buildx-platforms.outputs.platforms }}
          push: false

      - uses: actions/cache/save@v3
        with:
          path: ${{ matrix.oci-archive-name }}
          key: ${{ github.run_id }}-${{ matrix.oci-archive-name }}

  uploads:
    runs-on: ubuntu-22.04
    needs: [prepare-build-matrix, run-builds]
    name: Upload
    if: ${{ always() && github.ref_name == 'main' }}
    environment:
      name: swift-environment
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-build-matrix.outputs.build-matrix) }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache/restore@v3
        with:
          path: ${{ matrix.oci-archive-name }}
          key: ${{ github.run_id }}-${{ matrix.oci-archive-name }}
      
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: |
          pip install -r src/uploads/requirements.txt
          ./src/uploads/requirements.sh

      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
          path: source
      
      - run: cd source && git checkout ${{ matrix.commit }}

      - name: Infer track name
        id: infer-track
        env:
          DOCKERFILE_IMAGE_VERSION: ${{ matrix.dockerfile-build.version }}
        run: |
          ./src/uploads/infer_image_track.py --recipe-dirname source/${{ matrix.directory }}

      - name: Define image revision number
        id: define-revision
        env:
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
          OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
          IMAGE_NAME: ${{ matrix.name }}
          SWIFT_CONTAINER_NAME: ${{ env.SWIFT_CONTAINER_NAME }}
        run: ./src/uploads/define_image_revision.sh
      
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install skopeo
        env:
          SKOPEO_BRANCH: 'v1.9.1'
          SKOPEO_URL: 'https://github.com/containers/skopeo'
        run: |
          git clone -b ${{ env.SKOPEO_BRANCH }} --depth 1 ${{ env.SKOPEO_URL }} skopeo
          pushd skopeo

          docker run -v $PWD:/src -w /src -e DISABLE_DOCS=1 \
              golang:1.18 sh -c 'apt update; apt install -y libgpgme-dev libassuan-dev libbtrfs-dev libdevmapper-dev pkg-config; make'

          sudo mv bin/skopeo /usr/local/bin/
          sudo chmod +x /usr/local/bin/skopeo
      
      - name: Upload to GHCR
        run: |
          skopeo copy --multi-arch all \
            oci-archive:${{ matrix.oci-archive-name }} \
            docker://ghcr.io/${{ github.repository_owner }}/oci-factory/${{ matrix.name }}:${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}_${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}
          path: ${{ matrix.oci-archive-name }}
          
  # run-tests:
  #   needs: [run-builds]
  #   if: success()
  #   uses: ./.github/workflows/Test.yaml
  #   with:
  #     artifact-name: ${{ matrix.oci-archive-name }}