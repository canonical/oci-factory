name: Builds
on:
  workflow_dispatch:
    inputs:
      oci-image-name:
        description: 'OCI image to build and test'
        required: true
      upload:
        description: 'Upload image to GHCR'
        required: true
        type: boolean
        default: false

jobs:
  prepare-build:
    runs-on: ubuntu-22.04
    name: Prepare build
    outputs:
      build-matrix: ${{ steps.prepare-matrix.outputs.build-matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate image from dispatch
        id: validate-image
        run: |
          img_path="oci/${{ inputs.oci-image-name }}"
          test -d "${img_path}"

          echo "img-path=${img_path}" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - run: pip install -r src/builds/requirements.txt

      - name: Validate and prepare builds matrix
        id: prepare-matrix
        run: |
          ./src/builds/prepare_single_image_build_matrix.py \
            --oci-path ${{ steps.validate-image.outputs.img-path }}

  run-build:
    runs-on: ubuntu-22.04
    needs: [prepare-build]
    name: Build
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.prepare-build.outputs.build-matrix) }}
    env:
      OCI_ARCHIVE_NAME: ${{ matrix.name }}_${{ matrix.commit }}_${{ matrix.id }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
      
      - run: git checkout ${{ matrix.commit }}

      - name: Validate image naming and base
        working-directory: ${{ matrix.directory }}
        env:
          YQ_VERSION: 'v4.32.2'
          YQ_BINARY: yq_linux_amd64
        run: |
          if [ -z ${{ matrix.dockerfile-build }} ]
          then
            wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/${{ env.YQ_BINARY }}
            sudo mv ${{ env.YQ_BINARY }} /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            
            rock_name=`cat rockcraft.y*ml | yq -r .name`
            if [[ "${{ matrix.path }}" != *"${rock_name}"* ]]
            then
              echo "ERROR: the ROCK's name '${rock_name}' must match the OCI folder name!"
              exit 1
            fi
          else
            grep 'FROM' Dockerfile | tail -1 | grep ubuntu || \
              (echo "ERROR: the image '${rock_name}' must be based on Ubuntu!" \
                && exit 1)
          fi

      # If this is a ROCK...
      - name: Build ROCK ${{ matrix.name }}
        if: matrix.dockerfile-build == ''
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ matrix.directory }}"
          verbosity: debug

      - name: Rename ROCK OCI archive
        if: matrix.dockerfile-build == ''
        run: |
          mv ${{ steps.rockcraft.outputs.rock }} ${{ env.OCI_ARCHIVE_NAME }}   
          
      # If this is a Dockerfile-based image...
      - name: Set up QEMU
        if: matrix.dockerfile-build != ''
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: matrix.dockerfile-build != ''
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Form the platforms string
        if: matrix.dockerfile-build != ''
        id: buildx-platforms
        run: |
          sudo apt install -y jq
          platforms=$(echo linux/$(echo '${{ toJSON(matrix.dockerfile-build.platforms) }}' | jq -r 'join(",linux/")'))
          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"
        
      - name: Build OCI image ${{ matrix.name }}
        if: matrix.dockerfile-build != ''
        uses: docker/build-push-action@v4
        with:
          context: '${{ matrix.directory }}'
          outputs: 'type=oci,dest=${{ env.OCI_ARCHIVE_NAME }}'
          platforms: ${{ steps.buildx-platforms.outputs.platforms }}
          push: false

      - uses: actions/cache/save@v3
        with:
          path: ${{ env.OCI_ARCHIVE_NAME }}
          key: ${{ github.run_id }}-${{ env.OCI_ARCHIVE_NAME }}


  upload:
    runs-on: ubuntu-22.04
    needs: [prepare-build, run-build]
    name: Upload
    if: ${{ inputs.upload }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.prepare-build.outputs.build-matrix) }}
    env:
      OCI_ARCHIVE_NAME: ${{ matrix.name }}_${{ matrix.commit }}_${{ matrix.id }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: |
          pip install -r src/uploads/requirements.txt
          ./src/uploads/requirements.sh

      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.source }}
          fetch-depth: 0
          path: source

      - run: cd source && git checkout ${{ matrix.commit }}

      - uses: actions/cache/restore@v3
        with:
          path: ${{ env.OCI_ARCHIVE_NAME }}
          key: ${{ github.run_id }}-${{ env.OCI_ARCHIVE_NAME }}
          fail-on-cache-miss: true

      - name: Define image revision number
        id: get-revision
        env:
          OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
          OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
          OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
          OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
          OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
          IMAGE_NAME: ${{ matrix.name }}
          SWIFT_CONTAINER_NAME: ${{ vars.SWIFT_CONTAINER_NAME }}
        run: ./src/uploads/define_image_revision.sh

      - name: Infer track name
        id: get-track
        env:
          DOCKERFILE_IMAGE_VERSION: ${{ matrix.dockerfile-build.version }}
        run: |
          ./src/uploads/infer_image_track.py --recipe-dirname source/${{ matrix.directory }}

      - name: Name output artefact
        id: rename-oci-archive
        run: |
          # Rename the OCI archive tarball
          name="${{ matrix.name }}_${{ steps.get-track.outputs.track }}_${{ steps.get-revision.outputs.revision }}"
          mv ${{ env.OCI_ARCHIVE_NAME }} $name

          echo "name=${name}" >> "$GITHUB_OUTPUT"
      
      - uses: actions/cache/save@v3
        with:
          path: ${{ steps.rename-oci-archive.outputs.name }}
          key: ${{ steps.rename-oci-archive.outputs.name }}
        
      - name: Run tests
        # actions outputs are: workflow_id, workflow_url and conclusion
        uses: convictional/trigger-workflow-and-wait@v1.6.5
        env:
          IS_A_ROCK: ${{ matrix.dockerfile-build == '' && true || false }}
        with:
          owner: ${{ github.repository_owner }}
          repo: oci-factory
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_file_name: Tests.yaml
          ref: ${{ github.ref }}
          client_payload: '{ "oci-image-name": "${{ steps.rename-oci-archive.outputs.name }}", "is-a-rock": ${{ env.IS_A_ROCK }} }' 
      
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0
        with:
          syft-version: 'v0.75.0'
    
      - name: Generate SBOM
        id: generate-sbom
        run: |
          syft oci-archive:${{ steps.rename-oci-archive.outputs.name }} \
            -o spdx-json \
            --file ${{ steps.rename-oci-archive.outputs.name }}.sbom.spdx.json

          echo "sbom=${{ steps.rename-oci-archive.outputs.name }}.sbom.spdx.json" >> "$GITHUB_OUTPUT"
      
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.generate-sbom.outputs.sbom }}
          path: ${{ steps.generate-sbom.outputs.sbom }}

      # https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md
      

      # - name: Define image revision number
      #   id: define-revision
      #   env:
      #     OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
      #     OS_TENANT_NAME: ${{ secrets.SWIFT_OS_TENANT_NAME }}
      #     OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
      #     OS_REGION_NAME: ${{ secrets.SWIFT_OS_REGION_NAME }}
      #     OS_STORAGE_URL: ${{ secrets.SWIFT_OS_STORAGE_URL }}
      #     IMAGE_NAME: ${{ matrix.name }}
      #     SWIFT_CONTAINER_NAME: ${{ vars.SWIFT_CONTAINER_NAME }}
      #   run: ./src/uploads/define_image_revision.sh
      
      # - name: Login to GHCR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Setup publishing environment
      #   env:
      #     ROCKS_DEV_LP_SSH_PRIVATE: ${{ secrets.ROCKS_DEV_LP_SSH_PRIVATE }}
      #     ROCKS_DEV_LP_USERNAME: ${{ secrets.ROCKS_DEV_LP_USERNAME }}
      #     CPC_BUILD_TOOLS_REPO: git.launchpad.net/~cloudware/cloudware/+git/cpc_build_tools
      #     CPC_BUILD_TOOLS_REPO_REF: 9b716ed8a8ba728d036b54b1bb17a8f49dbda434
      #     SKOPEO_BRANCH: 'v1.9.1'
      #     SKOPEO_URL: 'https://github.com/containers/skopeo'
      #   run: ./src/releases/requirements.sh
          
      # - name: Upload to GHCR
      #   env:
      #     GHCR_REPO: ${{ github.repository_owner }}/oci-factory
      #     GHCR_USERNAME: ${{ github.actor }}
      #     GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     ./src/releases/tag_and_publish.sh ${{ matrix.oci-archive-name }} \
      #       ${{ matrix.name }} \
      #       ${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}

      # #######
      # only upload the revision number to Swift here, not before
      # #######

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.name }}_${{ steps.infer-track.outputs.track }}_${{ steps.define-revision.outputs.revision }}
      #     path: ${{ matrix.oci-archive-name }}
          
  # run-tests:
  #   needs: [run-builds]
  #   if: success()
  #   uses: ./.github/workflows/Test.yaml
  #   with:
  #     artifact-name: ${{ matrix.oci-archive-name }}