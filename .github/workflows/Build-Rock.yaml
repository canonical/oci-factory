name: Build rock

on:
  workflow_call:
    inputs:
      # build parameters
      oci-archive-name:
        description: "Final filename of the rock OCI archive."
        type: string
        required: true
      build-id:
        description: "Optional string for identifying workflow jobs in GitHub UI"
        type: string

      # source parameters
      rock-repo:
        description: "Public Git repo where to build the rock from."
        type: string
        required: true
      rock-repo-commit:
        description: "Git ref from where to build the rock from."
        type: string
        required: true
      rockfile-directory:
        description: "Directory in repository where to find the rockcraft.yaml file."
        type: string
        required: true

      # parameters for multi-arch builds
      arch-map:
        description: "JSON string mapping target architecture to runners."
        type: string
        default: '{"amd64": ["linux", "X64"], "arm64": ["linux", "ARM64"]}'
      lpci-fallback:
        description: "Enable fallback to Launchpad build when runners for target arch are not available."
        type: boolean
        default: false

env:
  ROCK_REPO_DIR: rock-repo  # path where the image repo is cloned into
  ROCK_CI_FOLDER: ci-rocks  # path of uploaded/downloaded artifacts

jobs:
  configure-build:
    # configure-build reads the rockcraft.yaml, creating one or more *-build job runs
    # depending on the target architecture.
    runs-on: ubuntu-22.04
    outputs:
      runner-build-matrix: ${{ steps.configure.outputs.runner-build-matrix }}
      lpci-build-matrix: ${{ steps.configure.outputs.lpci-build-matrix }}
      oci-factory-ref: ${{ steps.workflow-version.outputs.sha }}
    name: "configure-build ${{ inputs.build-id != '' && format('| {0}', inputs.build-id) || ' '}}"
    steps:

      - name: Get Workflow Version
        # Note: we may need to pass a github token when working with private repositories. 
        # https://github.com/canonical/get-workflow-version-action  
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/oci-factory
          file-name: Build-Rock.yaml

      - name: Cloning OCI Factory
        uses: actions/checkout@v4
        with:
          repository: canonical/oci-factory
          ref: ${{ steps.workflow-version.outputs.sha }}
          fetch-depth: 1

      - name: Cloning Target Repo
        uses: ./.github/actions/checkout
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: "recursive"

      - name: Installing Python 
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Installing Python requirements
        run: pip install -r src/build_rock/configure/requirements.txt

      # Configure matrices for each *-build job
      - name: Configuring Jobs
        id: configure
        run: |
          python3 -m src.build_rock.configure.generate_build_matrix \
            --rockfile-directory "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}" \
            --lpci-fallback "${{ toJSON(inputs.lpci-fallback) }}" \
            --config ${{ toJSON(inputs.arch-map) }} # important: do not use quotes here

  runner-build:
    # runner-build builds rocks per target architecture using pre configured runner images.
    needs: [configure-build]
    if: fromJSON(needs.configure-build.outputs.runner-build-matrix).include[0] != ''
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.configure-build.outputs.runner-build-matrix) }}
    runs-on: ${{ matrix.runner }}
    name: "runner-build | ${{ matrix.architecture }} ${{ inputs.build-id != '' && format('| {0}', inputs.build-id) || ' '}}"
    steps:

      - name: Cloning OCI Factory
        uses: actions/checkout@v4
        with:
          repository: canonical/oci-factory
          ref: ${{ needs.configure-build.outputs.oci-factory-ref }}
          fetch-depth: 1

      - name: Cloning Target Repo
        uses: ./.github/actions/checkout
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: "recursive"

      - name: Building Target
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"
          verbosity: debug

      - name: Collecting Artifacts
        id: collect-artifacts
        run: |
          mkdir -p ${{ env.ROCK_CI_FOLDER }} && cp ${{ steps.rockcraft.outputs.rock }} "$_"
          echo "filename=$(basename ${{ steps.rockcraft.outputs.rock }})" >> $GITHUB_OUTPUT

      - name: Uploading Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
          path: ${{ env.ROCK_CI_FOLDER }}
          if-no-files-found: error

  lpci-build:
    # lpci-build is a fallback for building rocks if no suitable runners are
    # configured for the required architecture. Builds in this job will be
    # outsourced to Launchpad for completion.
    # Note the Secret
    needs: [configure-build]
    if: fromJSON(needs.configure-build.outputs.lpci-build-matrix).include[0] != ''
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.configure-build.outputs.lpci-build-matrix) }}
    runs-on: ubuntu-22.04
    name: "lpci-build | ${{ matrix.architecture }} ${{ inputs.build-id != '' && format('| {0}', inputs.build-id) || ' '}}"
    steps:

      - name: Cloning OCI Factory
        uses: actions/checkout@v4
        with:
          repository: canonical/oci-factory
          ref: ${{ needs.configure-build.outputs.oci-factory-ref }}
          fetch-depth: 1

      - name: Cloning Target Repo
        uses: ./.github/actions/checkout
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: "recursive"

      - name: Building Target
        # TODO: Replace this retry action with bash equivalent for better testing
        uses: nick-fields/retry@v3.0.0
        with:
          timeout_minutes: 180
          max_attempts: 4
          polling_interval_seconds: 5
          retry_wait_seconds: 30
          command: |
            src/build_rock/lpci_build/lpci_build.sh \
              -c "${{ secrets.LP_CREDENTIALS_B64 }}" \
              -d "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"

      - name: Collecting Artifacts
        id: collect-artifacts
        run: |
          mkdir -p ${{ env.ROCK_CI_FOLDER }} && cp ${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}/*.rock "$_"
          echo "filename=${{ matrix.rock-name }}_${{ matrix.architecture }}" >> $GITHUB_OUTPUT

      - name: Uploading Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
          path: ${{ env.ROCK_CI_FOLDER }}
          if-no-files-found: error

  assemble-rock:
    # Assemble individual single-arch rocks into multi-arch rocks
    needs: [runner-build, lpci-build, configure-build]
    runs-on: ubuntu-22.04
    # Always run even if one of the *-build jobs are skipped
    # Nice example from benjamin-bergia/github-workflow-patterns...
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    name: "assemble-rock ${{ inputs.build-id != '' && format('| {0}', inputs.build-id) || ' '}}"
    steps:
      # Job Setup
      - name: Cloning OCI Factory
        uses: actions/checkout@v4
        with:
          repository: canonical/oci-factory
          ref: ${{ needs.configure-build.outputs.oci-factory-ref }}
          fetch-depth: 1

      - run: src/build_rock/assemble_rock/requirements.sh
      - name: Downloading Single Arch rocks
        uses: actions/download-artifact@v4
        id: download
        with:
          path: ${{ env.ROCK_CI_FOLDER }}
          pattern: ${{ inputs.oci-archive-name }}-*

      - name: Assembling Multi Arch rock
        run: |
          src/build_rock/assemble_rock/assemble.sh \
            -n "${{ inputs.oci-archive-name }}" \
            -d "${{ env.ROCK_CI_FOLDER }}"

      - name: Uploading Multi Arch rock
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}
          path: ${{ inputs.oci-archive-name }}
          if-no-files-found: error
